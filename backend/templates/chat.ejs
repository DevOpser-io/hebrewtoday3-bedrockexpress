<!-- EJS Chat Template - designed to work with the frontend/src/chat.js -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Bedrock Express AI Chat</title>
  <link rel="icon" href="/static/icon.png" type="image/png">
  
  <!-- CSS Files -->
  <link rel="stylesheet" href="/static/css/litera-bootstrap.min.css">
  
  <!-- Critical inline styles to prevent flash of unstyled content -->
  <style nonce="<%= cspNonce %>">
    .lesson-item {
      background: transparent;
      border: none;
      padding: 0.75rem 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      text-align: left;
      width: 100%;
      border-radius: 8px;
      margin-bottom: 0.25rem;
      transition: background-color 0.2s ease;
      font-weight: 500;
    }
    .lesson-item:hover {
      background-color: rgba(0,0,0,0.05);
    }
    .lesson-item.active {
      background-color: #007bff;
      color: white;
    }
    .lesson-status {
      font-size: 0.8rem;
      opacity: 0.7;
    }
    .lesson-item.active .lesson-status {
      opacity: 1;
    }
    .lesson-part-nav {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 8px;
    }
    .part-button {
      flex: 1;
      padding: 0.5rem 0.75rem;
      border: 1px solid #dee2e6;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }
    .part-button:hover {
      background: #e9ecef;
    }
    .part-button.active {
      background: #007bff;
      color: white;
      border-color: #007bff;
    }
    .lesson-content {
      padding: 1rem;
      line-height: 1.6;
    }
    .lesson-content h3 {
      color: #007bff;
      margin-bottom: 1rem;
    }
    .flashcard-container {
      text-align: center;
      margin: 1.5rem 0;
    }
    .lesson-flashcard {
      max-width: 300px;
      width: 100%;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .lesson-footer {
      padding: 1rem;
      border-top: 1px solid #dee2e6;
      background: #f8f9fa;
    }
    .lesson-navigation {
      display: flex;
      justify-content: space-between;
      gap: 1rem;
    }
    .nav-button {
      padding: 0.5rem 1rem;
      border: 1px solid #007bff;
      background: white;
      color: #007bff;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .nav-button:hover {
      background: #007bff;
      color: white;
    }
  </style>
  
  <!-- Remaining CSS Files -->
  <link rel="stylesheet" href="/static/css/bootstrap-icons.css">
  <link rel="stylesheet" href="/static/nav.css">
  <link rel="stylesheet" href="/static/flash.css">
  <link rel="stylesheet" href="/static/dist/bundle.css">
  
  <!-- Custom styles to match original application -->
  <link rel="stylesheet" href="/static/chat-custom.css">
  
  <!-- JavaScript Files -->
  <script src="/static/js/bootstrap.bundle.min.js" defer></script>
  <script src="/static/flash.js" defer></script>
  <script src="/static/csrf.js" defer></script>
</head>
<body>
  <header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
      <div class="container-fluid">
        <a class="navbar-brand" href="/">Bedrock Express AI</a>
        
        <!-- hamburger toggler -->
        <button 
          class="navbar-toggler" 
          type="button" 
          data-bs-toggle="collapse" 
          data-bs-target="#navbarNav" 
          aria-controls="navbarNav" 
          aria-expanded="false" 
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        
        <%- include('./partials/nav') %>
      </div>
    </nav>
  </header>

  <main class="container-fluid p-0">
    <div class="row app-container m-0">
      <!-- Sidebar for conversation history -->
      <div class="sidebar">
        <div class="sidebar-content">
          <div class="sidebar-header">
            <span>Hebrew Lessons</span>
          </div>
          <div class="lesson-list">
            <% for (let i = 1; i <= 18; i++) { %>
              <button 
                type="button" 
                class="lesson-item <%= typeof lessonNumber !== 'undefined' && i == lessonNumber ? 'active' : '' %>" 
                data-lesson="<%= i %>"
                onclick="selectLesson(<%= i %>)"
              >
                Lesson <%= i %>
                <% if (i <= 2) { %>
                  <span class="lesson-status">‚úì</span>
                <% } else { %>
                  <span class="lesson-status">üìù</span>
                <% } %>
              </button>
            <% } %>
          </div>
          
        </div>
      </div>
      
      <!-- Chat area -->
      <div class="chat-area">
        <!-- Mobile header removed as hamburger menu is now in navbar -->

        <!-- Lesson content container -->
        <div class="lesson-container">
          <div id="lesson-welcome" class="lesson-content">
            <h2>Welcome to Hebrew Today!</h2>
            <p>Select a lesson from the sidebar to begin your Hebrew learning journey.</p>
            <p>Each lesson contains 4 parts:</p>
            <ul>
              <li><strong>New Vocabulary</strong> - Learn new words with flashcards</li>
              <li><strong>Sentence Pattern</strong> - Build sentences using vocabulary</li>
              <li><strong>Free Speech</strong> - Practice speaking aloud</li>
              <li><strong>Hebrew Letters & Vowels</strong> - Learn letter recognition and pronunciation</li>
            </ul>
          </div>
          
          <div id="lesson-content" class="lesson-content" style="display: none;">
            <!-- Lesson part navigation -->
            <div class="lesson-part-nav">
              <button class="part-button active" data-part="1">1. Vocabulary</button>
              <button class="part-button" data-part="2">2. Sentence Pattern</button>
              <button class="part-button" data-part="3">3. Free Speech</button>
              <button class="part-button" data-part="4">4. Letters & Vowels</button>
            </div>
            
            <!-- Lesson content will be loaded here -->
            <div id="current-part-content">
              <!-- Content loaded dynamically -->
            </div>
          </div>
        </div>
        
        <!-- Lesson navigation footer -->
        <div class="lesson-footer" id="lesson-footer" style="display: none;">
          <div class="lesson-navigation">
            <button id="prev-lesson-btn" class="nav-button" onclick="navigateLesson(-1)">
              <i class="bi bi-chevron-left"></i> Previous Lesson
            </button>
            <button id="next-lesson-btn" class="nav-button" onclick="navigateLesson(1)">
              Next Lesson <i class="bi bi-chevron-right"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Footer removed to match original design -->

  <!-- Seed globals and hooks before bundle.js loads -->
  <script nonce="<%= cspNonce %>">
    // Seed the globals first
    window.currentConversationId = '<%= typeof conversationId !== "undefined" ? conversationId : "" %>';
    window.isTemporaryChat = () => document.getElementById('temp-chat-toggle').checked;
    
    // Define a global loadConversations function that will be implemented later
    window.loadConversations = function() {
      // This will be overridden by the actual implementation
      console.log('loadConversations called before implementation');
    };
    
    // Wrap startStream (must be here so we catch the original)
    const originalStartStream = window.startStream;
    if (originalStartStream) {
      window.startStream = (convId, onDone) => {
        window.currentConversationId = convId;
        originalStartStream(convId, () => { 
          window.loadConversations(); 
          if (onDone && typeof onDone === 'function') onDone(); 
        });
      };
    }
  </script>

  <!-- Load the bundled JavaScript -->
  <script src="/static/dist/bundle.js"></script>
  <script src="/static/js/navbar-debug.js"></script>
  <script src="/static/js/mobile-nav.js"></script>
  
  <!-- Lesson management script -->
  <script nonce="<%= cspNonce %>">
    let currentLesson = null;
    let currentPart = 1;
    let lessonData = {};

    // Lesson selection from sidebar
    function selectLesson(lessonNumber) {
      currentLesson = lessonNumber;
      currentPart = 1;
      
      // Update active lesson in sidebar
      document.querySelectorAll('.lesson-item').forEach(item => {
        item.classList.remove('active');
      });
      document.querySelector(`[data-lesson="${lessonNumber}"]`).classList.add('active');
      
      // Show lesson content, hide welcome
      document.getElementById('lesson-welcome').style.display = 'none';
      document.getElementById('lesson-content').style.display = 'block';
      document.getElementById('lesson-footer').style.display = 'block';
      
      // Load lesson data and display first part
      loadLessonData(lessonNumber).then(() => {
        displayPart(1);
        updatePartNavigation();
        updateLessonNavigation();
      });
    }

    // Load lesson data from server
    async function loadLessonData(lessonNumber) {
      try {
        const response = await fetch(`/api/lesson/${lessonNumber}/content`, {
          credentials: 'same-origin'
        });
        const data = await response.json();
        
        if (data.success) {
          lessonData[lessonNumber] = data.lesson;
        } else {
          throw new Error('Failed to load lesson');
        }
      } catch (error) {
        console.error('Failed to load lesson data:', error);
        // Use fallback content
        lessonData[lessonNumber] = {
          title: `Lesson ${lessonNumber}`,
          parts: [
            { title: "New Vocabulary", content: "Loading content..." },
            { title: "Sentence Pattern", content: "Loading content..." },
            { title: "Free Speech", content: "Loading content..." },
            { title: "Hebrew Letters & Vowels", content: "Loading content..." }
          ]
        };
      }
    }

    // Display specific part of current lesson
    function displayPart(partNumber) {
      if (!lessonData[currentLesson]) return;
      
      currentPart = partNumber;
      const part = lessonData[currentLesson].parts[partNumber - 1];
      
      if (part) {
        document.getElementById('current-part-content').innerHTML = `
          <h3>${part.title}</h3>
          <div class="part-content">${part.content}</div>
        `;
      }
      
      updatePartNavigation();
    }

    // Update part navigation buttons
    function updatePartNavigation() {
      document.querySelectorAll('.part-button').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === currentPart);
      });
    }

    // Update lesson navigation buttons
    function updateLessonNavigation() {
      const prevBtn = document.getElementById('prev-lesson-btn');
      const nextBtn = document.getElementById('next-lesson-btn');
      
      prevBtn.style.display = currentLesson > 1 ? 'block' : 'none';
      nextBtn.style.display = currentLesson < 18 ? 'block' : 'none';
    }

    // Navigate between lessons
    function navigateLesson(direction) {
      const newLesson = currentLesson + direction;
      if (newLesson >= 1 && newLesson <= 18) {
        selectLesson(newLesson);
      }
    }

    // Part navigation click handlers
    document.querySelectorAll('.part-button').forEach(button => {
      button.addEventListener('click', (e) => {
        const partNumber = parseInt(e.target.dataset.part);
        displayPart(partNumber);
      });
    });

    // Initialize - select lesson 1 by default or from URL
    window.addEventListener('load', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const lessonFromUrl = urlParams.get('lesson');
      
      if (lessonFromUrl && lessonFromUrl >= 1 && lessonFromUrl <= 18) {
        selectLesson(parseInt(lessonFromUrl));
      }
    });
  </script>
</body>
</html>
